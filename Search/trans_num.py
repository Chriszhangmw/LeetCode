#!/usr/bin/env python
# coding: utf-8

# In[3]:


CN_NUM = {
    '〇': 0, '一': 1, '二': 2, '三': 3, '四': 4, '五': 5, '六': 6, '七': 7, '八': 8, '九': 9, '零': 0,
    '壹': 1, '贰': 2, '叁': 3, '肆': 4, '伍': 5, '陆': 6, '柒': 7, '捌': 8, '玖': 9, '貮': 2, '两': 2,
}
# 这里先构建一个字典，这里涉及两个转换，一个就是自然数，比如二对应2，但是前提是都是各位，如果是两百，这个时候就要考虑后面得百了

CN_UNIT = {
    '十': 10,
    '拾': 10,
    '百': 100,
    '佰': 100,
    '千': 1000,
    '仟': 1000,
    '万': 10000,
    '萬': 10000,
    '亿': 100000000,
    '億': 100000000,
    '兆': 1000000000000,
}


def chinese_to_arabic(cn):
    unit = 0  # 计数器得作用，表示ldig里面是否存有需要乘积百千万这种操作，假设读的十十，unit就是10，读的百，那就是100
    ldig = []  # dige用来存储百千万这种需要乘积得操作
    for cndig in reversed(cn):
        # 这里采用倒叙去一个个得遍历输入得中文，为什么要倒叙，因为从右边数过来是最简单得，比如一百六，如果从
        # 左边开始遍历，第一个数字是一，但你不知道这个一是一百还是一千，反过来就比较清晰了，第一个字母是
        # 六，没有单位，那就是6，下面第二个字母是百，代表接下来得数字是要乘以100得
        if cndig in CN_UNIT:  # 先判断有没有百，千万这种词，比如输入是“一百万二十三”，第一个字母是三，就不会在CN_UNIT里面，就跑到else去了
            unit = CN_UNIT.get(cndig)
            if unit == 10000 or unit == 100000000:  # 为什么要判断万和亿， 因为比如二十万，这个二十和单独的二十不一样，需要乘以10000，亿同样的
                ldig.append(unit)
                unit = 1 #因为上面存储了unit到ldig，所以unit相当于置空。切记不能为0，因为当你想弄在个位，十万位，十亿位的时候，需要乘以1
        else:  # 这种情况最简单，没有百千万这种词，直接相加就是
            dig = CN_NUM.get(cndig)
            if unit: #这里如果是各位得，当然是0，直接ldig做append就好了。但是比如输入“一百万二十三”，这里得二十怎么刻画？ 因为我们先读的是十，十会存储在ldig里面，并且由unit来计数，所以要这样子来找到比二先读到的十
                dig *= unit #对应乘以它的单位就好了
                unit = 0 # 取完了之后记得清零计数器
            ldig.append(dig)
    if unit == 10: #处理10-19的数字，比如十三，当读了十之后，妈的后面没有数字了，应该补一个，所以这里免得漏
        ldig.append(10)
    val, tmp = 0, 0
    for x in reversed(ldig): #这里为什么要判断万和亿，按照上面的逻辑，二十万零八，ldig存储的应该是[ 8, 0,10000,20]
                           #怎么抖出来这个200000，先读到的请注意是20，然后再是10000，所以tmp=20,然后再是10000，从if里做乘积操作
        if x == 10000 or x == 100000000:
            val += tmp * x
            tmp = 0
        else:
            tmp += x
    val += tmp
    return val

# In[ ]:


print(chinese_to_arabic('一百三十万零五千三百八十二'))

